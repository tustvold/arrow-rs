// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

use crate::comparator::args::ComparatorArgs;
use crate::comparator::codegen::CraneliftIr;
use crate::comparator::ir::generate_ir;
use crate::datatypes::{Schema, SchemaRef};
use crate::error::Result;
use cranelift_jit::JITModule;
use std::cmp::Ordering;

type CompareFn =
    fn(usize, *const usize, *const u8, usize, *const usize, *const u8) -> Ordering;

type EqualFn = fn(usize, *const usize, *const u8, usize, *const usize, *const u8) -> bool;

/// A compiled comparator function
pub(crate) struct ComparatorImpl {
    schema: SchemaRef,
    /// An option so it can be taken in Drop
    module: Option<JITModule>,
    compare: CompareFn,
    equal: EqualFn,
}

impl std::fmt::Debug for ComparatorImpl {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ComparatorImpl")
            .field("schema", &self.schema)
            .finish()
    }
}

impl ComparatorImpl {
    pub fn new(schema: SchemaRef) -> Result<Self> {
        let comparator_ir = generate_ir(schema.as_ref());
        let mut cranelift_ir = CraneliftIr::new(&comparator_ir)?;

        println!("Equal:\n {}", cranelift_ir.display_equal());
        println!("Compare:\n {}", cranelift_ir.display_compare());

        let equal = cranelift_ir.finalize_equal();
        let compare = cranelift_ir.finalize_compare();
        let module = cranelift_ir.finalize();

        Ok(Self {
            schema,
            module: Some(module),
            compare: unsafe { std::mem::transmute(compare) },
            equal: unsafe { std::mem::transmute(equal) },
        })
    }

    pub fn is_schema_compatible(&self, schema: &Schema) -> bool {
        for (a, b) in self.schema.fields().iter().zip(schema.fields()) {
            if a.data_type() != b.data_type() || a.is_nullable() != b.is_nullable() {
                return false;
            }
        }
        true
    }

    /// Returns the result of comparing the row at index `a_idx` in `a` with the row
    /// at index `b_idx` in `b`
    ///
    ///
    /// # SAFETY
    ///
    /// Both `a` and `b` must have been generated by this `ComparatorImpl` instance.
    ///
    /// The [`RecordBatch`] from which `a` and `b` were created must have not been dropped
    /// or modified since the call to [`super::args::extract_args`]
    ///
    /// `a_idx` must be `<` the row count of `a`
    ///
    /// `b_idx` must be `<` the row count of `b`
    ///
    pub unsafe fn cmp(
        &self,
        a: &ComparatorArgs,
        a_idx: usize,
        b: &ComparatorArgs,
        b_idx: usize,
    ) -> Ordering {
        (self.compare)(
            a_idx,
            a.buffers(),
            a.bit_offsets(),
            b_idx,
            b.buffers(),
            b.bit_offsets(),
        )
    }

    /// Returns true if the row at index `a_idx` in `a` is equal to the row
    /// at `b_idx` in `b`
    ///
    /// # SAFETY
    ///
    /// See [`Self::cmp`]
    ///
    pub unsafe fn eq(
        &self,
        a: &ComparatorArgs,
        a_idx: usize,
        b: &ComparatorArgs,
        b_idx: usize,
    ) -> bool {
        (self.equal)(
            a_idx,
            a.buffers(),
            a.bit_offsets(),
            b_idx,
            b.buffers(),
            b.bit_offsets(),
        )
    }
}

impl Drop for ComparatorImpl {
    fn drop(&mut self) {
        unsafe { self.module.take().unwrap().free_memory() }
    }
}
