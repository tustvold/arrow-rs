// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

use crate::comparator::args::ComparatorArgs;
use crate::comparator::codegen;
use crate::comparator::ir::{generate_ir, ComparatorIr, Op};
use crate::datatypes::{Schema, SchemaRef};
use crate::error::Result;
use cranelift_codegen::cursor::{Cursor, CursorPosition, FuncCursor};
use cranelift_codegen::ir::{AbiParam, Block, InstBuilder, Type, Value};
use cranelift_jit::{JITBuilder, JITModule};
use cranelift_module::{FuncId, Module};
use std::cmp::Ordering;

type CompareFn =
    fn(usize, *const usize, *const u8, usize, *const usize, *const u8) -> Ordering;

type EqualFn = fn(usize, *const usize, *const u8, usize, *const usize, *const u8) -> bool;

/// A compiled comparator function
pub(crate) struct ComparatorImpl {
    schema: SchemaRef,
    /// An option so it can be taken in Drop
    module: Option<JITModule>,
    compare: CompareFn,
    equal: EqualFn,
}

impl std::fmt::Debug for ComparatorImpl {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ComparatorImpl")
            .field("schema", &self.schema)
            .finish()
    }
}

impl ComparatorImpl {
    pub fn is_schema_compatible(&self, schema: &Schema) -> bool {
        for (a, b) in self.schema.fields().iter().zip(schema.fields()) {
            if a.data_type() != b.data_type() || a.is_nullable() != b.is_nullable() {
                return false;
            }
        }
        true
    }

    /// Returns the result of comparing the row at index `a_idx` in `a` with the row
    /// at index `b_idx` in `b`
    ///
    ///
    /// # SAFETY
    ///
    /// Both `a` and `b` must have been generated by this `ComparatorImpl` instance.
    ///
    /// The [`RecordBatch`] from which `a` and `b` were created must have not been dropped
    /// or modified since the call to [`super::args::extract_args`]
    ///
    /// `a_idx` must be `<` the row count of `a`
    ///
    /// `b_idx` must be `<` the row count of `b`
    ///
    pub unsafe fn cmp(
        &self,
        a: &ComparatorArgs,
        a_idx: usize,
        b: &ComparatorArgs,
        b_idx: usize,
    ) -> Ordering {
        (self.compare)(
            a_idx,
            a.buffers(),
            a.bit_offsets(),
            b_idx,
            b.buffers(),
            b.bit_offsets(),
        )
    }

    /// Returns true if the row at index `a_idx` in `a` is equal to the row
    /// at `b_idx` in `b`
    ///
    /// # SAFETY
    ///
    /// See [`Self::cmp`]
    ///
    pub unsafe fn eq(
        &self,
        a: &ComparatorArgs,
        a_idx: usize,
        b: &ComparatorArgs,
        b_idx: usize,
    ) -> bool {
        (self.equal)(
            a_idx,
            a.buffers(),
            a.bit_offsets(),
            b_idx,
            b.buffers(),
            b.bit_offsets(),
        )
    }
}

impl Drop for ComparatorImpl {
    fn drop(&mut self) {
        unsafe { self.module.take().unwrap().free_memory() }
    }
}

pub(crate) fn build_comparator(schema: SchemaRef) -> Result<ComparatorImpl> {
    let ir = generate_ir(schema.as_ref());
    Compiler::new(schema).translate(ir).build()
}

struct FunctionBuilder {
    ctx: cranelift_codegen::Context,
    args: [Value; 6],
    block: Block,
}

impl FunctionBuilder {
    fn new(module: &JITModule, ret: Type) -> Self {
        let mut ctx = module.make_context();

        let ptr = module.target_config().pointer_type();
        ctx.func.signature.returns = vec![AbiParam::new(ret)];
        ctx.func.signature.params = vec![AbiParam::new(ptr); 6];

        // Setup first block
        let block = ctx.func.dfg.make_block();
        ctx.func.layout.append_block(block);

        let mut args = [Value::with_number(0).unwrap(); 6];
        for val in &mut args {
            *val = ctx.func.dfg.append_block_param(block, ptr);
        }



        Self { ctx, args, block }
    }

    fn cursor(&mut self) -> FuncCursor<'_> {
        let mut cursor = FuncCursor::new(&mut self.ctx.func);
        cursor.set_position(CursorPosition::After(self.block));
        cursor
    }

    fn finalize(mut self, module: &mut JITModule) -> FuncId {
        // TODO: Error handling
        let id = module
            .declare_anonymous_function(&self.ctx.func.signature)
            .unwrap();

        module.define_function(id, &mut self.ctx).unwrap();
        id
    }
}

struct Compiler {
    schema: SchemaRef,

    module: JITModule,

    equal: FunctionBuilder,

    equal_vars: Vec<Value>,

    compare: FunctionBuilder,

    compare_vars: Vec<Value>,
}

impl Compiler {
    fn new(schema: SchemaRef) -> Self {
        let jit_builder =
            JITBuilder::new(cranelift_module::default_libcall_names()).unwrap();
        let module = JITModule::new(jit_builder);

        let equal = FunctionBuilder::new(&module, cranelift_codegen::ir::types::B8);
        let compare = FunctionBuilder::new(&module, cranelift_codegen::ir::types::I8);

        Self {
            schema,
            module,
            equal,
            equal_vars: vec![],
            compare,
            compare_vars: vec![],
        }
    }

    fn translate(mut self, ir: ComparatorIr) -> Self {
        self.equal_vars.reserve(ir.operations.len());
        self.compare_vars.reserve(ir.operations.len());

        for op in ir.operations {
            self.translate_op(op)
        }
        self
    }

    fn translate_op(&mut self, op: Op) {
        match op {
            Op::LoadLeft(_) => {}
            Op::LoadRight(_) => {}
            Op::Compare(_, _) => {}
            Op::CompareSlices(_, _) => {}
            Op::CompareNulls(_, _) => {}
        }
    }

    fn build(mut self) -> Result<ComparatorImpl> {
        {
            let mut cursor = self.equal.cursor();
            let v = cursor.ins().bconst(cranelift_codegen::ir::types::B8, true);
            cursor.next_inst();
            cursor.ins().return_(&[v]);
        }

        {
            let mut cursor = self.compare.cursor();
            let v = cursor.ins().iconst(cranelift_codegen::ir::types::I8, 0);
            cursor.next_inst();
            cursor.ins().return_(&[v]);
        }

        println!("Equal:\n {}", self.equal.ctx.func.display());
        println!("Compare:\n {}", self.compare.ctx.func.display());

        let equal = self.equal.finalize(&mut self.module);
        let compare = self.compare.finalize(&mut self.module);

        self.module.finalize_definitions();

        let equal = self.module.get_finalized_function(equal);
        let compare = self.module.get_finalized_function(compare);

        Ok(ComparatorImpl {
            schema: self.schema,
            module: Some(self.module),
            compare: unsafe { std::mem::transmute(compare) },
            equal: unsafe { std::mem::transmute(equal) },
        })
    }
}
